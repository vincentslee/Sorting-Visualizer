{"version":3,"sources":["Components/Helpers/Swap.js","Components/Helpers/SetColor.js","Components/Sorting.js","App.js","reportWebVitals.js","index.js"],"names":["Swap","a","b","array","holder","num","Sorting","pause","resetRef","useRef","current","useEffect","setCount","useState","data","setData","count","algo","setAlgo","speed","setSpeed","arrayLength","setArrayLength","callback","delay","savedCallback","id","setInterval","clearInterval","useInterval","console","log","length","forEach","element","color","SetColor","value","setSorted","sorted","idx","setIdx","InsertionSort","smallest","setSmallest","SelectionSort","error","dataValues","Array","from","Math","floor","random","newData","push","slice","resetData","e","preventDefault","changeAlgo","index","className","onClick","ReactSlider","thumbClassName","trackClassName","defaultValue","min","max","onChange","map","item","style","width","height","backgroundColor","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.8dea6034.chunk.js","sourcesContent":["export default function Swap(a, b, array){\n    var holder = array[a];\n    array[a] = array[b];\n    array[b] = holder;\n    return array;\n}","export default function (num) {\n    return 'rgb('+num*5+','+num*5+','+num*5+')';\n}","import React, {useState, useEffect, useRef} from 'react'\nimport ReactSlider from 'react-slider'\nimport Swap from './Helpers/Swap';\nimport SetColor from './Helpers/SetColor';\n\n// Used to rerender every x milliseconds (x being the speed state in this script)\nfunction useInterval(callback, delay) {\n    const savedCallback = useRef();\n    useEffect(() => {\n      savedCallback.current = callback;\n    });\n    useEffect(() => {\n      function tick() {\n        savedCallback.current();\n      }\n      let id = setInterval(tick, delay);\n      return () => clearInterval(id);\n    }, [delay]);\n}\n\nfunction Sorting({pause}) {\n\n    let resetRef = useRef();\n    // Trick to Intialize countRef.current on first render only.\n    resetRef.current = resetRef.current || false; \n    \n    useEffect(() => {\n      if (resetRef.current === true) {\n        setCount(0);\n      }\n    });\n\n    // State is used to hold data that needs to be stored between loops\n    const [data, setData] = useState([]);\n    const [count, setCount] = useState(0);\n    const [algo, setAlgo] = useState(0);\n    const [speed, setSpeed] = useState(25)\n    const [arrayLength, setArrayLength] = useState(100);\n    useInterval(()=> {\n      if (pause) {\n        resetRef.current = true;\n        return;\n      }\n      resetRef.current = false;\n\n      // the sorting algorithms are called every tick\n      try{\n\n        switch(algo){\n          case 0:\n            break;\n          case 1:\n            console.log('bubble')\n            BubbleSort(data);\n            break;\n          case 2:\n            console.log('insertion')\n            InsertionSort(data);\n            break;\n          case 3:\n            console.log('selection')\n            SelectionSort(data);\n            break;\n        }\n      } catch(error) {\n        console.log(error)\n      }\n      console.log('tick')\n      // This code dynamically updates the array, and is placed in useInterval so it only runs once per tick\n      if (data.length < arrayLength){\n        console.log('adding')\n        var dataValues = Array.from({length: (arrayLength-data.length)}, ()=> Math.floor(Math.random() * 51));\n        var newData = data;\n        dataValues.forEach(num => {\n            newData.push({\n                value: num,\n                color: SetColor(num),\n            })\n        });\n        setData(newData);\n      } \n      if (data.length > arrayLength){\n        setData(data.slice(0, arrayLength));\n      }\n      // the below value determines the delay between ticks in milliseconds, as set by 'speed'\n    }, pause ? null : speed);\n\n    const [sorted, setSorted] = useState(false);\n\n    function BubbleSort(array){\n        setCount(count+1)\n        if (count < array.length - 1) {\n          //array[count].color = 'green';\n            // if the next value is smaller, swap the two values\n            array.forEach(element => {\n              element.color = SetColor(element.value);\n            });\n            if (array[count].value > array[count+1].value){\n                // Sets the color of the values being compared, and also resets the colors of irrelevant values\n                array[count].color = 'red';\n                array[count+1].color = 'red';\n                array = Swap(count, count+1, array)\n                setSorted(false);\n            } else {\n                array[count].color = 'green';\n            }\n            setData(array);\n        } else {\n            if (sorted !== true)\n              setCount(0)\n            setSorted(true)\n        }\n        \n    }\n\n    const [idx, setIdx] = useState(0);\n    function InsertionSort(array){\n      if (idx > 0){\n        array.forEach(element => {\n          element.color = SetColor(element.value);\n        });\n        array[idx].color = 'red';\n        array[idx+1].color = 'red';\n        array[count].color = 'green';\n        if (array[idx].value > array[idx+1].value){\n          array = Swap(idx, idx+1, array)\n          setIdx(idx-1);\n        } else {\n          setIdx(0)\n        }\n        setData(array)\n      }\n      else if (count < array.length - 1){\n        setCount(count+1);\n        setIdx(count);\n        array[count].color = 'green';\n        setData(array)\n      }\n    }\n\n    const [smallest, setSmallest] = useState(0);\n    function SelectionSort(array){\n      if (idx < array.length-1){\n        array.forEach(element => {\n          element.color = SetColor(element.value);\n        });\n        array[smallest].color = 'red';\n        array[idx].color = 'red';\n        array[count].color = 'green';\n        if (count === idx) {\n          setSmallest(idx)\n        }\n        if (count < array.length-1){\n          if (array[smallest].value > array[count+1].value){\n            console.log('new smallest')\n            setSmallest(count+1);\n          }\n          setCount(count+1);\n        } else {\n          array = Swap(idx, smallest, array);\n          setIdx(idx+1);\n          setCount(idx);\n        }\n      } else {\n        array = Swap(idx, idx-1, array);\n      }\n      setData(array);\n    }\n\n    useEffect(() => {\n      resetData();\n    }, [])\n\n    const resetData = (e) => {\n      if (e)\n        e.preventDefault();\n        setCount(0);\n        setIdx(0);\n        setSorted(false);\n        setSmallest(0);\n\n      // \n      var dataValues = Array.from({length: arrayLength}, ()=> Math.floor(Math.random() * 51));\n      var newData = [{}];\n      dataValues.forEach(num => {\n          newData.push({\n              value: num,\n              color: SetColor(num),\n          })\n      });\n      setData(newData);\n    }\n\n    const changeAlgo = (e, index) => {\n      e.preventDefault();\n      setAlgo(index);\n\n      setCount(0);\n      setIdx(0);\n      setSorted(false);\n      setSmallest(0);\n    }\n\n    return (\n      <div className=\"container-fluid\">\n        <div className=\"row\">\n          <button onClick={(e)=>changeAlgo(e, 1)} className=\"col\">Bubble Sort</button>\n          <button onClick={(e)=>changeAlgo(e, 2)} className=\"col\">Insertion Sort</button>\n          <button onClick={(e)=>changeAlgo(e, 3)} className=\"col\">Selection Sort</button>\n        </div>\n        <div className=\"row\">\n          <button onClick={(e)=>{resetData(e); changeAlgo(e, 0)}} className=\"col\">Reset</button>\n          <div className=\"col Slider\">\n            <div className=\"row align-items-center\">\n              <h1 className=\"col-sm-3\">[Bars]</h1>\n              <ReactSlider\n              className=\"horizontal-slider col\"\n              thumbClassName=\"thumb\"\n              trackClassName=\"track\"\n              defaultValue={100}\n              min = {5}\n              max = {200}\n              onChange={(e)=>setArrayLength(e)}\n              />\n            </div>\n          </div>\n          <div className=\"col align-items-center Slider\">\n            <div className=\"row align-items-center\">\n              <h1 className=\"col-sm-3\">[Fast]</h1>\n              <ReactSlider\n              className=\"horizontal-slider col\"\n              thumbClassName=\"thumb\"\n              trackClassName=\"track\"\n              defaultValue={25}\n              min = {1}\n              max = {100}\n              onChange={(e)=>setSpeed(e)}\n              />\n              <h1 className=\"col-sm-3\">[Slow]</h1>\n            </div>\n          </div>\n        </div>\n        <div id=\"Graph\" className=\"row align-items-end justify-content-center\">\n            {\n                data.map(item =>{\n                  try{\n\n                    return (<div className=\"bar\" style={{width: 80/arrayLength +'vw', height: item.value*10, backgroundColor: item.color}}></div>);\n                  } catch(error){\n                    console.log(error);\n                  }\n                })\n            }\n        </div>\n      </div>\n    );\n  }\n\nexport default Sorting;","import React from 'react';\nimport Sorting from './Components/Sorting';\nimport './App.css';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Sorting/>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}