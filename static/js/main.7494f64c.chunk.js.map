{"version":3,"sources":["Components/Helpers/Swap.js","Components/Helpers/SetColor.js","Components/Sorting.js","App.js","reportWebVitals.js","index.js"],"names":["Swap","a","b","array","holder","num","Sorting","pause","resetRef","useRef","current","useEffect","setCount","useState","data","setData","count","algo","setAlgo","speed","setSpeed","callback","delay","savedCallback","id","setInterval","clearInterval","useInterval","console","log","length","value","forEach","element","color","SetColor","setSorted","sorted","idx","setIdx","InsertionSort","smallest","setSmallest","SelectionSort","resetData","e","preventDefault","dataValues","Array","from","Math","floor","random","newData","push","changeAlgo","index","className","onClick","ReactSlider","thumbClassName","trackClassName","defaultValue","min","max","onChange","map","item","style","height","backgroundColor","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.7494f64c.chunk.js","sourcesContent":["export default function Swap(a, b, array){\n    var holder = array[a];\n    array[a] = array[b];\n    array[b] = holder;\n    return array;\n}","export default function (num) {\n    return 'rgb('+num*5+','+num*5+','+num*5+')';\n}","import React, {useState, useEffect, useRef} from 'react'\nimport ReactSlider from 'react-slider'\nimport Swap from './Helpers/Swap';\nimport SetColor from './Helpers/SetColor';\n\n// Used to rerender every x milliseconds (x being the speed state in this script)\nfunction useInterval(callback, delay) {\n    const savedCallback = useRef();\n    useEffect(() => {\n      savedCallback.current = callback;\n    });\n    useEffect(() => {\n      function tick() {\n        savedCallback.current();\n      }\n      let id = setInterval(tick, delay);\n      return () => clearInterval(id);\n    }, [delay]);\n}\n\nfunction Sorting({pause}) {\n\n    let resetRef = useRef();\n    // Trick to Intialize countRef.current on first render only.\n    resetRef.current = resetRef.current || false; \n    \n    useEffect(() => {\n      if (resetRef.current === true) {\n        setCount(0);\n      }\n    });\n\n    // State is used to hold data that needs to be stored between loops\n    const [data, setData] = useState([]);\n    const [count, setCount] = useState(0);\n    const [algo, setAlgo] = useState(0);\n    const [speed, setSpeed] = useState(25)\n    useInterval(()=> {\n      if (pause) {\n        resetRef.current = true;\n        return;\n      }\n      resetRef.current = false;\n\n      // the sorting algorithms are called every tick\n      switch(algo){\n        case 0:\n          break;\n        case 1:\n          console.log('bubble')\n          BubbleSort(data);\n          break;\n        case 2:\n          console.log('insertion')\n          InsertionSort(data);\n          break;\n        case 3:\n          console.log('selection')\n          SelectionSort(data);\n          break;\n      }\n      // the below value determines the delay between ticks in milliseconds, as set by 'speed'\n    }, pause ? null : speed);\n\n    const [sorted, setSorted] = useState(false);\n\n    function BubbleSort(array){\n        setCount(count+1)\n        if (count < array.length - 1) {\n            // if the next value is smaller, swap the two values\n            if (array[count].value > array[count+1].value){\n                // Sets the color of the values being compared, and also resets the colors of irrelevant values\n                array.forEach(element => {\n                    element.color = SetColor(element.value);\n                });\n                array[count].color = 'red';\n                array[count+1].color = 'red';\n                array = Swap(count, count+1, array)\n                setData(array)\n                setSorted(false);\n            } else {\n              array.forEach(element => {\n                element.color = SetColor(element.value);\n              });\n              if (sorted !== true)\n                array[count].color = 'green';\n              setData(array);\n            }\n        } else {\n            setSorted(true)\n            setCount(0)\n        }\n        \n    }\n\n    const [idx, setIdx] = useState(0);\n    function InsertionSort(array){\n      if (idx > 0){\n        array.forEach(element => {\n          element.color = SetColor(element.value);\n        });\n        array[idx].color = 'red';\n        array[idx+1].color = 'red';\n        array[count].color = 'green';\n        if (array[idx].value > array[idx+1].value){\n          array = Swap(idx, idx+1, array)\n          setIdx(idx-1);\n        } else {\n          setIdx(0)\n        }\n        setData(array)\n      }\n      else if (count < array.length - 1){\n        setCount(count+1);\n        setIdx(count);\n        array[count].color = 'green';\n        setData(array)\n      }\n    }\n\n    const [smallest, setSmallest] = useState(0);\n    function SelectionSort(array){\n      if (idx < array.length-1){\n        array.forEach(element => {\n          element.color = SetColor(element.value);\n        });\n        array[smallest].color = 'red';\n        array[idx].color = 'red';\n        array[count].color = 'green';\n        if (count === idx) {\n          setSmallest(idx)\n        }\n        if (count < array.length-1){\n          if (array[smallest].value > array[count+1].value){\n            console.log('new smallest')\n            setSmallest(count+1);\n          }\n          setCount(count+1);\n        } else {\n          array = Swap(idx, smallest, array);\n          setIdx(idx+1);\n          setCount(idx);\n        }\n      } else {\n        array = Swap(idx, idx-1, array);\n      }\n      setData(array);\n    }\n\n    useEffect(() => {\n      resetData();\n    }, [])\n\n    const resetData = (e) => {\n      if (e)\n        e.preventDefault();\n        setCount(0);\n        setIdx(0);\n        setSorted(false);\n        setSmallest(0);\n\n      // \n      var dataValues = Array.from({length: 80}, ()=> Math.floor(Math.random() * 51));\n      var newData = [{}];\n      dataValues.forEach(num => {\n          newData.push({\n              value: num,\n              color: SetColor(num),\n          })\n      });\n      setData(newData);\n    }\n\n    const changeAlgo = (e, index) => {\n      e.preventDefault();\n      setAlgo(index);\n\n      setCount(0);\n      setIdx(0);\n      setSorted(false);\n      setSmallest(0);\n    }\n\n    return (\n      <div className=\"container-fluid\">\n        <div className=\"row\">\n          <button onClick={(e)=>changeAlgo(e, 1)} className=\"col\">Bubble Sort</button>\n          <button onClick={(e)=>changeAlgo(e, 2)} className=\"col\">Insertion Sort</button>\n          <button onClick={(e)=>changeAlgo(e, 3)} className=\"col\">Selection Sort</button>\n        </div>\n        <div className=\"row\">\n          <button onClick={(e)=>{resetData(e); changeAlgo(e, 0)}} className=\"col\">Reset</button>\n          <div className=\"col\" id=\"Slider\">\n            <div className=\"row\">\n              <h1 className=\"col-sm-3\">Speed:</h1>\n              <ReactSlider\n              className=\"horizontal-slider col\"\n              thumbClassName=\"thumb\"\n              trackClassName=\"track\"\n              defaultValue={25}\n              min = {1}\n              max = {100}\n              onChange={(e)=>setSpeed(e)}\n              />\n            </div>\n          </div>\n        </div>\n        <div id=\"Graph\" className=\"row align-items-end justify-content-center\">\n            {\n                data.map(item =>{\n                    return (<div className=\"bar\" style={{height: item.value*10, backgroundColor: item.color}}></div>);\n                })\n            }\n        </div>\n      </div>\n    );\n  }\n\nexport default Sorting;","import React from 'react';\nimport Sorting from './Components/Sorting';\nimport './App.css';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Sorting/>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}